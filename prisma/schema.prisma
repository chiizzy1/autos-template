// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole {
  AUTHORIZED
  UNAUTHORIZED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(UNAUTHORIZED)
  accounts      Account[]
  sessions      Session[]

  customers Customer[]
}

model Customer {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt
  firstName String
  lastName  String
  email     String       @unique
  phone     Int          @unique
  cars      CarDetails[]

  admin   User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId String
  repairs Repair[]

  @@index([adminId])
}

model CarDetails {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  plateNumber String
  make        String
  model       String
  year        Int
  owner       Customer @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String
  repair      Repair[]

  @@index([ownerId])
}

model Repair {
  id            String     @id @default(cuid())
  description   String
  estimatedCost Float
  trackId       String     @default(cuid())
  paid          Boolean    @default(false)
  fixed         Boolean    @default(false)
  car           CarDetails @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId         String
  repairStatus  String
  owner         Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId    String
  startDate     DateTime   @default(now())
  finishDate    DateTime?

  @@index([carId, customerId])
}

model Images {
  id          String  @id @default(cuid())
  fileKey     String
  fileUrl     String
  description String?
}

model TimeSlot {
  id               String  @id @default(cuid())
  date             String
  time             String
  availability     String
  clientId         String
  reason           String?
  carType          String?
  carModel         String?
  yearManufactured Int?
  additionalInfo   String?

  // Add a relation to the Client model
  client appointmentClient? @relation(fields: [clientId], references: [id])

  @@index([clientId])
}

model appointmentClient {
  id          String  @id @default(cuid())
  name        String
  email       String
  phoneNumber String?

  // Add a relation to the TimeSlot model
  timeSlots TimeSlot[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
